#!/usr/bin/env python
#
# This file is part of WebPass.
# Copyright (C) 2017 Iwan Timmer
#
# WebPass is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# WebPass is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

from glob import glob
import os, sys, struct, json, subprocess

PASS_DIR = os.path.expanduser(os.getenv('PASSWORD_STORE_DIR', '~/.password-store'))

# Send message using Native messaging protocol
def send_message(data):
  msg = json.dumps(data).encode('utf-8')
  length = struct.pack('@I', len(msg))
  sys.stdout.buffer.write(length)
  sys.stdout.buffer.write(msg)
  sys.stdout.buffer.flush()

def search(data):
  results = []
  for root, dirs, files in os.walk(PASS_DIR):
    dirs[:] = [d for d in dirs if not d[0] == '.']
    files_raw = [root[len(PASS_DIR + os.sep):] + os.sep + f[:-4] for f in files if not f.startswith('.') and f.endswith('.gpg')]
    results.extend([f for f in files_raw if data['query'].lower() in f.lower()])

  send_message({ 'results': results })

def show(data):
  result = subprocess.Popen(['gpg', '--quiet', '-d', PASS_DIR + os.sep + data['name'] + '.gpg'], stdout=subprocess.PIPE)
  out, _ = result.communicate()
  lines = [line.decode('utf-8') for line in out.splitlines()]
  metas = dict([(x.strip() for x in line.split(":", 1)) for line in lines[1:]])
  send_message({ 'password': lines[0], 'meta': metas })

def main():
  while True:
    # Read message using Native messaging protocol
    length_bytes = sys.stdin.buffer.read(4)
    if len(length_bytes) == 0:
      return

    length = struct.unpack('i', length_bytes)[0]
    data = json.loads(sys.stdin.buffer.read(length).decode('utf-8'))

    if data['cmd'] == 'find':
      search(data)
    elif data['cmd'] == 'show':
      show(data)

if __name__ == '__main__':
  main()
